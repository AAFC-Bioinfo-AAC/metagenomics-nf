manifest {
    description = 'Devin Holman and Arun Kommadath Metagenomic workflow (AAFC).'
}

conda.enabled = true

profiles {
    biocluster {
        conda_env = "/isilon/common/conda/brouardjs"    // shared env on the Biocluster
        // scope executor
        executor {
            name = 'sge'
            perJobMemLimit = true
        }

        //scope report
        report {
            enabled = true
            overwrite = true
        }

        //scope params
        params {
            use_prepared_reads = false
            use_megahit_individual_assemblies = false
            skip_kraken = true
            skip_humann = true
            skip_kaiju = true
            skip_coassembly = false
            results            = "$baseDir/results"
            genome             = "$baseDir/data/genomes/bowtie_genome_index/cow/"
            genome_basename    = "cow"      // e.g. cow in cow.1.bt2, cow.2.bt2, cow.rev.1.bt2, cow.rev.2.bt2
            reads              = "$baseDir/data/reads/*_R{1,2}.fastq.gz"
            prepared_reads     = "$baseDir/data/prepared_reads/*_R{1,2}.fastq.gz"
            indiv_assemblies   = null
            map_file           = "$baseDir/metadata/map_file.tsv"
            coassembly_file    = "$baseDir/metadata/coassembly_groups.tsv"


            dram_config        = "$baseDir/metadata/config.json"
            chocophlan_db      = '/isilon/common/reference/databases/HUMAnN_db/HUMAnN_db_20230619/chocophlan'
            uniref_db          = '/isilon/common/reference/databases/HUMAnN_db/HUMAnN_db_20230619/uniref'
            metaphlan_db       = '/isilon/common/reference/databases/HUMAnN_db/HUMAnN_db_20230619/metaphlan_vJan21'
            checkm2_db         = '/isilon/common/reference/databases/CheckM2_database/uniref100.KO.1.dmnd'
            gtdb_db            = '/isilon/common/reference/databases/gtdb/release207_v2'
            kraken2            = '/isilon/common/reference/databases/kraken2_indexes/kraken2_gtdb/release214'
            kraken2_confidence_threshold = 0.5
            kaiju_db           = '/isilon/common/reference/databases/kaiju_db/kaiju_db_nr_euk_20230223'
            phylophlan_db      = 'unspecified'
        }  
	    
        // scope process
        process {
            cpus = 2
            memory = 64.GB
            penv = 'smp'
            cache = 'lenient'
            errorStrategy = 'retry'
            maxRetries = 1

            withLabel: mem_medium { memory = 128.GB }
            withLabel: mem_large { memory = 256.GB }
            withLabel: mem_xlarge { memory = 384.GB }
            withLabel: mem_xxlarge { memory = 1512.GB }
            
            withLabel: cpus_small { cpus = 2 }
            withLabel: cpus_medium { cpus = 4 }
            withLabel: cpus_large { cpus = 8 }
            withLabel: cpus_xlarge { cpus = 12 }
            withLabel: cpus_xxlarge { cpus = 20 }
            withLabel: cpus_xxxlarge { cpus = 120 } // for COASSEMBLY

            withName: RENAME_SEQUENCES {conda = "$conda_env/DRAM_2023"}
            withName: QUALITY_FILTERING {conda = "$conda_env/fastp"}
            withName: 'BOWTIE2.*' {conda = "$conda_env/bowtie2"}
            withName: OUTPUT_UNALIGNED_READS {conda = "$conda_env/bedtools"}
            withName: 'KAIJU|KAIJU_TAX_TABLE|KAIJU_FULL_TAX_TABLE' {conda = "$conda_env/kaiju"}
            withName: 'MERGE_TAX_FILES|MERGE_FULL_TAX_FILES' {conda = "$conda_env/R"}
            withName: 'HUMANN.*' { conda = "$conda_env/biobakery3"}
            withName: 'MEGAHIT_SINGLE|COASSEMBLY' {conda = "$conda_env/megahit"}
            withName: 'JGI_SUMMARIZE_SINGLE|METABAT2_BIN_SINGLE|JGI_SUMMARIZE|METABAT2_BIN_COASSEMBLY' {conda = "$conda_env/metabat2"}
            withName: 'CHECKM|CHECKM_SINGLE' {conda = "$conda_env/checkm2"}
            withName: DREP {conda = "$conda_env/drep2"}
            withName: 'QUAST|METAQUAST' {conda = "$conda_env/quast-5.2.0"}
            withName: GTDB_TK {conda = "$conda_env/gtdbtk-2.1.1"}
            withName: PHYLOPHLAN {conda = "$conda_env/phylophlan"}
            withName: COVERM {conda = "$conda_env/coverm"}
            withName: 'KRAKEN2|KRAKEN2_MPA|COMBINE_KRAKEN2|BRACKEN|BRACKEN_ALT' {conda = "$conda_env/kraken2"}
            withName: DRAM_ANNOTATION {conda = "$conda_env/DRAM_2023"
                                clusterOptions = "-cwd -V -S /bin/bash -q *@@mnint -l h=biocomp-0-3"}
            withName: DRAM_DISTILLATION {conda = "$conda_env/DRAM_2023"}
        }
    }

    waffles {
        conda_env = "/Drives/O/GRDI-AMR2/share/conda/envs"
        // scope executor
        executor {
            name = 'slurm'
            queueSize = 60
            submitRateLimit = '10 sec'
        }

        //scope report
        report {
            enabled = true
            overwrite = true
        }

        //scope params
        params {
            use_prepared_reads = false
            use_megahit_individual_assemblies = false
            skip_kraken = true
            skip_humann = true
            skip_kaiju = true
            skip_coassembly = true
            results            = "$baseDir/results"
            genome             = '/Drives/O/GRDI-AMR2/share/genomes/cow_pig'
            genome_basename    = "cow_pig"
            reads              = "$baseDir/data/reads/med_reads/*_R{1,2}.fastq.gz"
            prepared_reads     = null
            indiv_assemblies   = null
            map_file           = "$baseDir/metadata/map_file.tsv"
            coassembly_file    = "$baseDir/metadata/coassembly_groups.tsv"


            dram_config        = "$baseDir/metadata/config_waffles.json"
            chocophlan_db      = '/Drives/O/GRDI-AMR2/share/databases/HUMAnN_db/HUMAnN_db_20230710/chocophlan'
            uniref_db          = '/Drives/O/GRDI-AMR2/share/databases/HUMAnN_db/HUMAnN_db_20230710/uniref'
            metaphlan_db       = '/Drives/O/GRDI-AMR2/share/databases/HUMAnN_db/HUMAnN_db_20230710/metaphlan_vJan21'
            checkm2_db         = '/Drives/O/GRDI-AMR2/share/databases/CheckM2_database/uniref100.KO.1.dmnd'
            gtdb_db            = '/Drives/O/GRDI-AMR2/share/databases/gtdb/release214'
            kraken2            = '/Drives/O/GRDI-AMR2/share/databases/kraken2/gtdb/release214'
            kraken2_confidence_threshold = 0.5
            kaiju_db           = '/Drives/O/GRDI-AMR2/share/databases/kaiju'
            phylophlan_db      = '/Drives/O/USERS/jsbrouard/GRDI_share/databases/phylophlan_db'
        }
	    
        // scope process
        process {
            cpus = 2
            memory = 64.GB
            clusterOptions = "-p NMLResearch"
            cache = 'lenient'

            errorStrategy = 'retry'
            maxRetries = 1

            withLabel: mem_medium { memory = 128.GB }
            withLabel: mem_large { memory = 256.GB }
            withLabel: mem_xlarge { memory = 768.GB }
            withLabel: mem_xxlarge { memory = 1000.GB }

            withLabel: cpus_small { cpus = 2 }
            withLabel: cpus_medium { cpus = 4 }
            withLabel: cpus_large { cpus = 8 }
            withLabel: cpus_xlarge { cpus = 12 }
            withLabel: cpus_xxlarge { cpus = 20 }
            withLabel: cpus_xxxlarge { cpus = 80 } // for COASSEMBLY

            withName: RENAME_SEQUENCES {conda = "$conda_env/DRAM_2023"}
            withName: QUALITY_FILTERING {conda = "$conda_env/fastp_0.23.4"}
            withName: OUTPUT_UNALIGNED_READS {conda = "$conda_env/bedtools_2.31.1"}
            withName: 'BOWTIE2.*' {conda = "$conda_env/bowtie2_2.5.2"}
            withName: 'KAIJU|KAIJU_TAX_TABLE|KAIJU_FULL_TAX_TABLE' {conda = "$conda_env/kaiju_1.9.2"}
            withName: 'MERGE_TAX_FILES|MERGE_FULL_TAX_FILES' {conda = "$conda_env/R"}
            withName: 'HUMANN.*' { conda = "$conda_env/biobakery3"}
            withName: 'MEGAHIT_SINGLE|COASSEMBLY' {conda = "$conda_env/megahit_1.2"}
            withName: 'JGI_SUMMARIZE_SINGLE|METABAT2_BIN_SINGLE|JGI_SUMMARIZE|METABAT2_BIN_COASSEMBLY' {conda = "$conda_env/metabat2_2.15"}
            withName: 'CHECKM|CHECKM_SINGLE' {conda = "$conda_env/checkm2"} # in the GRDI2 folder, dont'use the conda env named 'checkm2_1.0.1'
            withName: DREP {conda = "$conda_env/drep_3.4.5"}
            withName: 'QUAST|METAQUAST' {conda = "$conda_env/quast-5.2.0"}
            withName: GTDB_TK {conda = "$conda_env/gtdbtk-2.1.1"}
            withName: PHYLOPHLAN {conda = "$conda_env/phylophlan_3.0.3"}
            withName: COVERM {conda = "$conda_env/coverm_0.6.1"}
            withName: 'KRAKEN2|KRAKEN2_MPA|COMBINE_KRAKEN2|BRACKEN|BRACKEN_ALT' {conda = "$conda_env/kraken2_2.1.2"}
            withName: 'DRAM.*' {conda = "$conda_env/DRAM_2023"
                                memory = '256 GB'
                                cpus = 20
            }
        }
    }

gpsc {
        conda_env = "/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/env/metagenomics_nf"
        NXF_OFFLINE = true
        // scope executor
        executor {
            name = 'slurm'
            queueSize = 30
            submitRateLimit = '10 sec'
        }

        //scope report
        report {
            enabled = true
            overwrite = true
        }

        //scope params
        params {
            use_prepared_reads = false
            use_megahit_individual_assemblies = false
            skip_kraken = true
            skip_humann = true
            skip_kaiju = true
            skip_coassembly = true
            results            = "$baseDir/results"
            genome             = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/metagenomics/metagenomic_nf/data/genomes/pig'
            genome_basename    = "pig"
            reads              = "$baseDir/data/reads/*_R{1,2}.fastq.gz"
            prepared_reads     = null
            indiv_assemblies   = null
            map_file           = "$baseDir/metadata/map_file.tsv"
            coassembly_file    = "$baseDir/metadata/coassembly_groups.tsv" 
            dram_config        = "$baseDir/metadata/config_gpsc.json"
            chocophlan_db      = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/databases/HUMAnN_db/HUMAnN_db_20230619/chocophlan'
            uniref_db          = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/databases/HUMAnN_db/HUMAnN_db_20230619/uniref'
            metaphlan_db       = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/databases/HUMAnN_db/HUMAnN_db_20230619/metaphlan_vJan21'
            checkm2_db         = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/databases/CheckM2_database/uniref100.KO.1.dmnd'
            gtdb_db            = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/databases/gtdb/release207_v2'
            kraken2            = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/databases/kraken2_indexes/kraken2_gtdb/release214'
            kraken2_confidence_threshold = 0.5
            kaiju_db           = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/databases/kaiju_db/kaiju_db_nr_euk_20230223'
            phylophlan_db      = '/gpfs/fs7/aafc/pilot/aafc_sjsr/abcc/resources/databases/phylophlan_db'
        }  
	    
        // scope process
        process {
            cpus = 2
            memory = 64.GB
            clusterOptions = {" -p standard --account=aafc_pilot -t 600 "}
            cache = 'lenient'

            errorStrategy = 'retry'
            maxRetries = 1

            withLabel: mem_medium { memory = 128.GB }
            withLabel: mem_large { memory = 256.GB }
            withLabel: mem_xlarge { memory = 384.GB }
            withLabel: mem_xxlarge { memory = 384.GB }

            withLabel: cpus_small { cpus = 2 }
            withLabel: cpus_medium { cpus = 4 }
            withLabel: cpus_large { cpus = 8 }
            withLabel: cpus_xlarge { cpus = 12 }
            withLabel: cpus_xxlarge { cpus = 20 }
            withLabel: cpus_xxxlarge { cpus = 80 } // for COASSEMBLY

            withName: RENAME_SEQUENCES {conda = "$conda_env/DRAM_2023"}
            withName: QUALITY_FILTERING {conda = "$conda_env/fastp"}
            withName: OUTPUT_UNALIGNED_READS {conda = "$conda_env/bedtools"}
            withName: 'BOWTIE2.*' {conda = "$conda_env/bowtie2"}
            withName: 'KAIJU|KAIJU_TAX_TABLE|KAIJU_FULL_TAX_TABLE' {conda = "$conda_env/kaiju"}
            withName: 'MERGE_TAX_FILES|MERGE_FULL_TAX_FILES' {conda = "$conda_env/R"}
            withName: 'HUMANN.*' { conda = "$conda_env/biobakery3"}
            withName: 'MEGAHIT_SINGLE|COASSEMBLY' {conda = "$conda_env/megahit"}
            withName: 'JGI_SUMMARIZE_SINGLE|METABAT2_BIN_SINGLE|JGI_SUMMARIZE|METABAT2_BIN_COASSEMBLY' {conda = "$conda_env/metabat2"}
            withName: 'CHECKM|CHECKM_SINGLE' {conda = "$conda_env/checkm2"}
            withName: DREP {conda = "$conda_env/drep"}
            withName: 'QUAST|METAQUAST' {conda = "$conda_env/quast-5.2.0"}
            withName: GTDB_TK {conda = "$conda_env/gtdbtk-2.1.1"}
            withName: PHYLOPHLAN {conda = "$conda_env/phylophlan"}
            withName: COVERM {conda = "$conda_env/coverm_0.6.1"}
            withName: 'KRAKEN2|KRAKEN2_MPA|COMBINE_KRAKEN2|BRACKEN|BRACKEN_ALT' {conda = "$conda_env/kraken2"}
            withName: 'DRAM.*' {conda = "$conda_env/DRAM_2023"
                                memory = '256 GB'
                                cpus = 20
            }
        }
    }

    local {
        conda_env = "/home/brouardjs/mambaforge/envs"
        // scope executor
        executor {
            name = 'local'
        }

        //scope report
        report {
            enabled = true
            overwrite = true
        }

        //scope params
        params {
            use_prepared_reads = true
            use_megahit_individual_assemblies = true
            skip_kraken = true
            skip_humann = true
            skip_kaiju = true
            skip_coassembly = false
            results            = "$baseDir/my_results"
            genome             = "$baseDir/data/genomes/cow/"
            genome_basename    = "cow"      // e.g. cow in cow.1.bt2, cow.2.bt2, cow.rev.1.bt2, cow.rev.2.bt2

            prepared_reads     = "$baseDir/data/prepared_reads/*_R{1,2}.fastq.gz"
            params.indiv_assemblies = '/home/brouardjs/data/local_gccode_projects/jsb/dev/start_with_individual_assemblies_results/data/individ_assemblies/megahit/*'
        }  
	    
        // scope process
        process {
            cpus = 2
            memory = 4.GB
            penv = 'smp'
            cache = 'lenient'
            
            withLabel: mem_medium { memory = 8.GB }
            withLabel: mem_large { memory = 16.GB }
            withLabel: mem_xlarge { memory = 32.GB }
            withLabel: mem_xxlarge { memory = 48.GB }
            
            withLabel: cpus_small { cpus = 2 }
            withLabel: cpus_medium { cpus = 4 }
            withLabel: cpus_large { cpus = 6 }
            withLabel: cpus_xlarge { cpus = 8 }
            withLabel: cpus_xxlarge { cpus = 10 }
            withLabel: cpus_xxxlarge { cpus = 12 } // for COASSEMBLY
            
            withName: 'BOWTIE2.*' {conda = "$conda_env/bowtie2"}
            withName: 'MEGAHIT_SINGLE|COASSEMBLY' {conda = "$conda_env/megahit"}
            withName: 'JGI_SUMMARIZE_SINGLE|METABAT2_BIN_SINGLE|JGI_SUMMARIZE|METABAT2_BIN_COASSEMBLY' {conda = "$conda_env/metabat2"}
        }
    }
}
