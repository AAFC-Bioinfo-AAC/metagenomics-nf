manifest {
  description = 'AAFC Metagenomic workflow.'
}

profiles {

  hpc {
		
    // Nextflow parameters

    apptainer.enabled      = true
    NXF_OFFLINE            = true
    workDir                = "${System.getenv('WORKDIR')}"

    // Scope params
		
    params {
      // Base parameters
      
      reads              = "${baseDir}/data/reads/*_R{1,2}.fastq.gz"
      results            = "${baseDir}/results"
      map_file           = "${baseDir}/data/map_files/map_file.tsv"
      coassembly_file    = "${baseDir}/data/map_files/coassembly_groups.tsv" 

      // Entry points, coassembly and parts to skip

      prepared_reads     = null
      indiv_assemblies   = null
      use_prepared_reads = false
      use_megahit_individual_assemblies = false
      skip_kraken        = false
      skip_humann        = false
      skip_kaiju         = false
      skip_coassembly    = true
			
      // Database paths and configurations

      genome             = "${System.getenv('GENOME')}"
      chocophlan_db      = "${System.getenv('CHOCOPHLAN_DB')}"
      uniref_db          = "${System.getenv('UNIREF_DB')}"
      metaphlan_db       = "${System.getenv('METAPHLAN_DB')}"
      checkm2_db         = "${System.getenv('CHECKM2_DB')}"
      gtdb_db            = "${System.getenv('GTDB_DB')}"
      kaiju_db           = "${System.getenv('KAIJU_DB')}"
      phylophlan_db      = "${System.getenv('PHYLO_DB')}"
      kraken2            = "${System.getenv('KRAKEN2_DB')}"
      kraken2_confidence_threshold = 0.5

      // Slurm and Apptainer

      apptainer_images   = "${System.getenv('APPTAINER_IMGS')}"
      slurm_account      = "${System.getenv('SLURM_ACCT')}"
      partition          = "${System.getenv('PARTITION')}"
      partition_high     = "${System.getenv('PARTITION_HIGH')}"
    }  

    // Scope executor

    executor {
      name               = 'slurm'
      queueSize          = 30
      submitRateLimit    = '10 sec'
    }

    // Scope report

    report {
      enabled   = true
      overwrite = true
      file      = "${baseDir}/results/report-${new java.text.SimpleDateFormat('yyyy-MM-dd-HHmmss').format(new java.util.Date())}.html"
    }

    // Scope process

    process {
      cpus           = 2
      memory         = 64.GB
      clusterOptions = {" -p ${params.partition} --account=${params.slurm_account} -t 1500 --get-user-env"}
      cache          = 'lenient'
      errorStrategy  = 'retry'
      maxRetries     = 1

      withLabel: mem_medium { memory = 128.GB }
      withLabel: mem_large { memory = 256.GB }
      withLabel: mem_xlarge { memory = 384.GB }
      withLabel: mem_xxlarge { memory = 940.GB }
      withLabel: mem_xxxlarge { memory = 1512.GB }

      withLabel: cpus_small { cpus = 2 }
      withLabel: cpus_medium { cpus = 4 }
      withLabel: cpus_large { cpus = 8 }
      withLabel: cpus_xlarge { cpus = 12 }
      withLabel: cpus_xxlarge { cpus = 20 }
      withLabel: cpus_xxxlarge { cpus = 40 } // for MEGAHIT_SINGLE
      withLabel: cpus_xxxxlarge { cpus = 80 } // for COASSEMBLY

      withName: RENAME_SEQUENCES {container = "${params.apptainer_images}/bedtools.sif"}
      withName: QUALITY_FILTERING {container = "${params.apptainer_images}/fastp.sif"}
      withName: OUTPUT_UNALIGNED_READS {container = "${params.apptainer_images}/bedtools.sif"}
      withName: 'BOWTIE2.*' {container = "${params.apptainer_images}/bowtie2.sif"
        containerOptions = "-B ${baseDir}"}
      withName: 'KAIJU|KAIJU_TAX_TABLE|KAIJU_FULL_TAX_TABLE' {container = "${params.apptainer_images}/kaiju.sif"}
      withName: 'MERGE_TAX_FILES|MERGE_FULL_TAX_FILES' {container = "${params.apptainer_images}/R.sif"
        containerOptions = "-B ${baseDir}/src"}
      withName: 'HUMANN.*' {container = "${params.apptainer_images}/biobakery3.sif"}
      withName: COASSEMBLY {container = "${params.apptainer_images}/megahit.sif"}
      withName: MEGAHIT_SINGLE {container = "${params.apptainer_images}/megahit.sif"
               memory = { 450.GB * task.attempt }
               clusterOptions = {
                  if (task.attempt == 1) {
                     "-p ${params.partition} --account=${params.slurm_account} -t 1500 --get-user-env"
                  } else {
                     "-p ${params.partition_high} --account=${params.slurm_account}__${params.partition_high} -t 2880"
                  }
               }
      }
      withName: 'JGI_SUMMARIZE_SINGLE|METABAT2_BIN_SINGLE|JGI_SUMMARIZE|METABAT2_BIN_COASSEMBLY' {container = "${params.apptainer_images}/metabat2.sif"}
      withName: 'CHECKM|CHECKM_SINGLE' {container = "${params.apptainer_images}/checkm2.sif"
        containerOptions = "-B ${params.checkm2_db}"}
      withName: 'DREP|DREP2' {container = "${params.apptainer_images}/drep.sif"}
      withName: 'QUAST|METAQUAST' {container = "${params.apptainer_images}/quast-5.2.0.sif"}
      withName: GTDB_TK {container = "${params.apptainer_images}/gtdbtk-2.4.0.sif"
        clusterOptions = " -p ${params.partition_high} --account=${params.slurm_account}__${params.partition_high} -t 1440"}
      withName: PHYLOPHLAN {container = "${params.apptainer_images}/phylophlan.sif"
        containerOptions = "-B ${PWD}"}
      withName: COVERM {container = "${params.apptainer_images}/coverm_0.6.1.sif"}
      withName: 'BRACKEN|BRACKEN_ALT' {container = "${params.apptainer_images}/kraken2.sif"
        containerOptions = "-B ${PWD}"}
      withName: KRAKEN2 {container = "${params.apptainer_images}/kraken2.sif"
        clusterOptions = {"-p ${params.partition_high} --account=${params.slurm_account}__${params.partition_high} -t 2880"}
      }
    }
  }
}
